##! BIFs for shunting with IP pairs using XDP. This interface is private, use
##! script functions instead.

%%{
#include "zeek/IPAddr.h"
#include "zeek/Val.h"

#include "bpf/UserXDP.h"
#include "bpf/filter_common.h"
#include "ShuntUtil.h"
#include "XDPProgram.h"
%%}

module XDP::ShuntIPPair;

function _get_map%(xdp_prog: opaque of XDP::Program, only_fin: bool &default=T,
                time_since_last_packet: interval &default=0sec%) : XDP::shunt_table %{
    auto zeek_prog = xdp::shunter::detail::XDPProgramVal::CastFromAny(xdp_prog);
    static auto ip_shunt_table = zeek::id::find_type<zeek::TableType>("XDP::ip_pair_shunt_table");
	static auto ip_pair = zeek::id::find_type<zeek::RecordType>("XDP::ip_pair");
    auto zeek_table = zeek::make_intrusive<zeek::TableVal>(ip_shunt_table);

    if ( ! zeek_prog ) {
        zeek::reporter->Error(zeek_prog.error().c_str());
        return zeek_table;
    }

    auto prog = (*zeek_prog)->prog;

    auto shunt_map = get_map<ip_pair_key>(get_ip_pair_map(prog));
    for ( const auto&[key, val] : shunt_map ) {
        // Skip conditions
        if (only_fin && (val.fin == 0 && val.rst == 0))
            continue;
        // Skip if we are still within time_since_last_packet
        else if ( time_since_last_packet &&
            (time_since_last_packet + mono_to_wall(val.timestamp) > zeek::util::current_time(true)) )
            continue;

        auto zeek_key = zeek::make_intrusive<zeek::RecordVal>(ip_pair);
        if ( IN6_IS_ADDR_V4MAPPED(&key.ip1) )
            zeek_key->Assign(0, zeek::make_intrusive<zeek::AddrVal>(
                                    *reinterpret_cast<const uint32_t*>(&key.ip1.s6_addr[12])));
        else
            zeek_key->Assign(0,
                             zeek::make_intrusive<zeek::AddrVal>(reinterpret_cast<const uint32_t*>(&key.ip1.s6_addr)));

        if ( IN6_IS_ADDR_V4MAPPED(&key.ip2) )
            zeek_key->Assign(1, zeek::make_intrusive<zeek::AddrVal>(
                                    *reinterpret_cast<const uint32_t*>(&key.ip2.s6_addr[12])));
        else
            zeek_key->Assign(1,
                             zeek::make_intrusive<zeek::AddrVal>(reinterpret_cast<const uint32_t*>(&key.ip2.s6_addr)));

        zeek_table->Assign(zeek_key, makeShuntedStats(true, &val));
    }

    return zeek_table;
%}

function _shunt%(xdp_prog: opaque of XDP::Program, ip1_val: addr, ip2_val: addr%) : bool %{
    auto zeek_prog = xdp::shunter::detail::XDPProgramVal::CastFromAny(xdp_prog);
    if ( ! zeek_prog ) {
        zeek::reporter->Error(zeek_prog.error().c_str());
        return zeek::val_mgr->Bool(false);
    }

    auto prog = (*zeek_prog)->prog;
    auto ip1 = addrToIpVal(ip1_val->AsAddrVal()->Get());
    auto ip2 = addrToIpVal(ip2_val->AsAddrVal()->Get());

    auto ip2_higher = compare_ips(&ip1, &ip2) < 0;

    auto key = ip_pair_key{
        .ip1 = ip2_higher ? ip1 : ip2,
        .ip2 = ip2_higher ? ip2 : ip1,
    };

    auto err = update_map(get_ip_pair_map(prog), &key);

    if ( err ) {
        zeek::reporter->Error(zeek::util::fmt("Failed to add to map: %s", (*err).c_str()));
        return zeek::val_mgr->Bool(false);
    }

    return zeek::val_mgr->Bool(true);
%}

function _shunt_stats%(xdp_prog: opaque of XDP::Program, orig_h: addr, resp_h: addr%) : XDP::ShuntedStats %{
    auto zeek_prog = xdp::shunter::detail::XDPProgramVal::CastFromAny(xdp_prog);
    if ( ! zeek_prog ) {
        zeek::reporter->Error(zeek_prog.error().c_str());
        return makeEmptyShuntedStats();
    }

    auto prog = (*zeek_prog)->prog;
    auto ip1 = addrToIpVal(orig_h->AsAddrVal()->Get());
    auto ip2 = addrToIpVal(resp_h->AsAddrVal()->Get());

    auto ip2_higher = compare_ips(&ip1, &ip2) < 0;

    auto key = ip_pair_key{
        .ip1 = ip2_higher ? ip1 : ip2,
        .ip2 = ip2_higher ? ip2 : ip1,
    };
    auto opt_val = get_val(get_ip_pair_map(prog), &key);
    if ( ! opt_val )
        return makeEmptyShuntedStats();

    return makeShuntedStats(ip2_higher, &*opt_val);
%}

## Stops shunting anything between two IPs.
##
## Returns: The shunted statistics right before removing
##
## .. zeek:see:: shunt shunt_stats
function _unshunt%(xdp_prog: opaque of XDP::Program, ip1_val: addr, ip2_val: addr%) : XDP::ShuntedStats %{
    auto zeek_prog = xdp::shunter::detail::XDPProgramVal::CastFromAny(xdp_prog);
    if ( ! zeek_prog ) {
        zeek::reporter->Error(zeek_prog.error().c_str());
        return makeEmptyShuntedStats();
    }

    auto prog = (*zeek_prog)->prog;
    auto ip1 = addrToIpVal(ip1_val->AsAddrVal()->Get());
    auto ip2 = addrToIpVal(ip2_val->AsAddrVal()->Get());

    auto ip2_higher = compare_ips(&ip1, &ip2) < 0;

    auto key = ip_pair_key{
        .ip1 = ip2_higher ? ip1 : ip2,
        .ip2 = ip2_higher ? ip2 : ip1,
    };

    auto opt_val = get_val(get_ip_pair_map(prog), &key);
    if ( ! opt_val )
        return makeEmptyShuntedStats();

    auto err = remove_from_map(get_ip_pair_map(prog), &key);

    if ( err ) {
        zeek::reporter->Error(zeek::util::fmt("Failed to add to map: %s", (*err).c_str()));
        return makeEmptyShuntedStats();
    }

    return makeShuntedStats(ip2_higher, &*opt_val);
%}

## Event called when we first saw the fin or rst for this IP pair.
## If the user unshunts in the event, then keep in mind that if multiple
## RST packets are sent, looking up the stats may result in a null value.
event first_fin%(pair: XDP::ip_pair%);
