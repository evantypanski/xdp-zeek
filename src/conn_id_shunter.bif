##! BIFs for shunting with XDP. This is the main interface for XDP shunting.

%%{
#include "zeek/IPAddr.h"
#include "zeek/Val.h"

#include "bpf/UserXDP.h"
#include "bpf/filter_common.h"
#include "shunt-util.h"
#include "XDPProgram.h"
%%}

module XDP::ShuntConnID;

## Retrieves the current values in the canonical ID map. The parameters are
## extra filtering before converting into script values. If both are provided,
## they must both match to include the shunted connection.
##
## only_fin: True if filtering for packets with a fin/rst
##
## time_since_last_packet: Interval that must elapse since the last packet
## to include
##
## Returns: A table of the "canonical" connection IDs getting shunted
function get_map%(xdp_prog: opaque of XDP::Program, only_fin: bool &default=T,
                time_since_last_packet: interval &default=0sec%) : XDP::shunt_table %{
    auto zeek_prog = xdp::shunter::detail::XDPProgramVal::CastFromAny(xdp_prog);
    static auto shunt_table = zeek::id::find_type<zeek::TableType>("XDP::shunt_table");
    auto zeek_table = zeek::make_intrusive<zeek::TableVal>(shunt_table);

    if ( ! zeek_prog ) {
        zeek::reporter->Error(zeek_prog.error().c_str());
        return zeek_table;
    }

    auto prog = (*zeek_prog)->prog;

    auto shunt_map = get_map<canonical_tuple>(get_canonical_id_map(prog));
    for ( const auto&[key, val] : shunt_map ) {
        // Skip conditions
        if (only_fin && (val.fin == 0 && val.rst == 0))
            continue;
        // Skip if we are still within time_since_last_packet
        else if ( time_since_last_packet &&
            (time_since_last_packet + mono_to_wall(val.timestamp) > zeek::util::current_time(true)) )
            continue;

        auto zeek_key = zeek::make_intrusive<zeek::RecordVal>(zeek::id::conn_id);
        if ( IN6_IS_ADDR_V4MAPPED(&key.ip1) )
            zeek_key->Assign(0, zeek::make_intrusive<zeek::AddrVal>(
                                    *reinterpret_cast<const uint32_t*>(&key.ip1.s6_addr[12])));
        else
            zeek_key->Assign(0,
                             zeek::make_intrusive<zeek::AddrVal>(reinterpret_cast<const uint32_t*>(&key.ip1.s6_addr)));

        zeek_key->Assign(1, zeek::val_mgr->Port(key.port1));

        if ( IN6_IS_ADDR_V4MAPPED(&key.ip2) )
            zeek_key->Assign(2, zeek::make_intrusive<zeek::AddrVal>(
                                    *reinterpret_cast<const uint32_t*>(&key.ip2.s6_addr[12])));
        else
            zeek_key->Assign(2,
                             zeek::make_intrusive<zeek::AddrVal>(reinterpret_cast<const uint32_t*>(&key.ip2.s6_addr)));

        zeek_key->Assign(3, zeek::val_mgr->Port(key.port2));
        zeek_key->Assign(4, zeek::val_mgr->Count(key.protocol));

        zeek_table->Assign(zeek_key, makeShuntedStats(true, &val));
    }

    return zeek_table;
%}

## Starts shunting anything with the conn_id. This is bidirectional.
##
## Returns: Whether the operation succeeded
##
## .. zeek:see:: unshunt shunt_stats
function shunt%(xdp_prog: opaque of XDP::Program, cid: conn_id%) : bool %{
    auto opt_tup = makeBPFMapTuple(cid->AsRecordVal());
    if ( ! opt_tup )
        return zeek::val_mgr->Bool(false);

    auto zeek_prog = xdp::shunter::detail::XDPProgramVal::CastFromAny(xdp_prog);
    if ( ! zeek_prog ) {
        zeek::reporter->Error(zeek_prog.error().c_str());
        return zeek::val_mgr->Bool(false);
    }

    auto prog = (*zeek_prog)->prog;
    auto err = update_map(get_canonical_id_map(prog), &*opt_tup);

    if ( err ) {
        zeek::reporter->Error(zeek::util::fmt("Failed to add to map: %s", (*err).c_str()));
        return zeek::val_mgr->Bool(false);
    }

    return zeek::val_mgr->Bool(true);
%}

## Provides the shunting statistics for this connection ID.
##
## Returns: The shunting statistics
##
## .. zeek:see:: shunt unshunt
function shunt_stats%(xdp_prog: opaque of XDP::Program, cid: conn_id%) : XDP::ShuntedStats %{
    auto opt_tup = makeBPFMapTuple(cid->AsRecordVal());
    if ( ! opt_tup )
        return makeEmptyShuntedStats();

    auto zeek_prog = xdp::shunter::detail::XDPProgramVal::CastFromAny(xdp_prog);
    if ( ! zeek_prog ) {
        zeek::reporter->Error(zeek_prog.error().c_str());
        return makeEmptyShuntedStats();
    }

    auto prog = (*zeek_prog)->prog;
    auto opt_val = get_val(get_canonical_id_map(prog), &*opt_tup);
    if ( ! opt_val )
        return makeEmptyShuntedStats();

    return makeShuntedStats(origIsIp1(cid->AsRecordVal()), &*opt_val);
%}

## Stops shunting anything with the conn_id.
##
## Returns: The shunted statistics right before removing
##
## .. zeek:see:: shunt shunt_stats
function unshunt%(xdp_prog: opaque of XDP::Program, cid: conn_id%) : XDP::ShuntedStats %{
    auto opt_tup = makeBPFMapTuple(cid->AsRecordVal());
    if ( ! opt_tup )
        return makeEmptyShuntedStats();

    auto zeek_prog = xdp::shunter::detail::XDPProgramVal::CastFromAny(xdp_prog);
    if ( ! zeek_prog ) {
        zeek::reporter->Error(zeek_prog.error().c_str());
        return makeEmptyShuntedStats();
    }

    auto prog = (*zeek_prog)->prog;

    auto opt_val = get_val(get_canonical_id_map(prog), &*opt_tup);
    if ( ! opt_val )
        return makeEmptyShuntedStats();

    auto err = remove_from_map(get_canonical_id_map(prog), &*opt_tup);

    if ( err ) {
        zeek::reporter->Error(zeek::util::fmt("Failed to remove from map: %s", (*err).c_str()));
        return makeEmptyShuntedStats();
    }

    return makeShuntedStats(origIsIp1(cid->AsRecordVal()), &*opt_val);
%}

## Event called when we first saw the fin or rst for this connection.
## If the user unshunts in the event, then keep in mind that if multiple
## RST packets are sent, looking up the stats may result in a null value.
event first_fin%(cid: conn_id%);
